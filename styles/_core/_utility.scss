/*
**
*** Utility Styles
**
*/

// Positioning

/* Center intro content w/ Tables
*/
.table
{
	display: table;
	margin-bottom: 0;
}

.table__cell
{
	display: table-cell;
	vertical-align: middle;
	text-align: center;
	height: 100%;
}

// Text
.underline
{
    text-decoration: underline;
}

// Mixins
$light: 0 0.02em #fff;
$dark: 0 0.02em $black;

@mixin text-shadow($ts-style: $light) {
	text-shadow: $ts-style;
}

.text-shadow-light
{
	@include text-shadow();
}

.text-shadow-dark
{
	@include text-shadow($dark);
}

@mixin paper-shadow() {
  -webkit-box-shadow: -3px 0px 5px 0px rgba(0,0,0,0.25);
  -moz-box-shadow: -3px 0px 5px 0px rgba(0,0,0,0.25);
  box-shadow: -3px 0px 5px 0px rgba(0,0,0,0.25);
}

// Vertical Align
@mixin vertical-align {
  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

// Rem <-> Px conversion 
@mixin rem($property, $values) {
  // Create a couple of empty lists as output buffers.
  $font-size: 16px;
  $px-values: ();
  $rem-values: ();

  // Loop through the $values list
  @each $value in $values {
    // For each property value, if it's in rem or px, derive both rem and
    // px values for it and add those to the end of the appropriate buffer.
    // Ensure all pixel values are rounded to the nearest pixel.
    @if $value == 0 or $value == 0px {
      // 0 -- use it without a unit
      $px-values: join($px-values, 0);
      $rem-values: join($rem-values, 0);
    } @else if type-of($value) == number and not unitless($value) and (unit($value) == px) {
      // px value given - calculate rem value from font-size
      $new-rem-value: $value / $font-size;
      $px-values: join($px-values, round($value));
      $rem-values: join($rem-values, #{$new-rem-value}rem);
    } @else if type-of($value) == number and not unitless($value) and (unit($value) == "%") {
      // % value given - don't add px or rem
      $px-values: join($px-values, #{$value});
      $rem-values: join($rem-values, #{$value});
    } @else if $value == auto {
      // auto - don't add px or rem
      $px-values: join($px-values, auto);
      $rem-values: join($rem-values, auto);
    } @else {
      // unitless value - use those directly as rem and calculate the px-fallback
      $px-values: join($px-values, round($value * $font-size));
      $rem-values: join($rem-values, #{$value}rem);
    }
  }

  // output the converted rules
  #{$property}: $px-values;
  #{$property}: $rem-values;
}

// Convert px to em
$browser-context: 16; // Default

@function em($pixels, $context: $browser-context) {
  @return #{$pixels/$context}em
}